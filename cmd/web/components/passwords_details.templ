package components

import (
	"fmt"
	"ypeskov/go-password-manager/models"
	"ypeskov/go-password-manager/cmd/web/layouts"
)

templ PasswordDetails(password models.EncryptedPassword) {
	@layouts.Base() {
		<div class="space-y-4 p-6 bg-white shadow-md rounded-md">
			<div class="flex items-center space-x-4">
				<h1 class="text-2xl font-semibold">Password Details</h1>
				<a href="/" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Back</a>
			</div>

			<ul>
				<li class="flex items center justify-between p-3 rounded-md bg-slate-300">
					<div class="flex items w-3/4 font-bold">
						<p class="w-1/3">Name</p>
						<p class="w-1/5">Login</p>
						<p class="w-1/5">Resource</p>
					</div>
					<div class="flex justify-end w-1/4 font-bold">
						<p class="text-center">Actions</p>
					</div>
				</li>
			</ul>

      <div class="flex justify-between p-3 rounded-md password-container">
        <div class="flex items-center w-3/4">
          <p class="w-1/3">{ password.Name }</p>
          <p class="w-1/5">{ password.Login }</p>
          <p class="w-1/5">{ password.Resource }</p>
          <button id="show-password-button"
          				onclick="showPassword()"
          				class="bg-blue-300 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Show Password</button>
          <p id="decrypted-password" class="hidden text-black font-bold py-2 px-4 rounded"></p>
          <span id="password" class="hidden">{ password.Password }</span>
          <span id="password-salt" class="hidden">{ password.Salt }</span>
          <span id="password-iv" class="hidden">{ password.Iv }</span>
        </div>
        <div class="flex items-center space-x-2">
          <a href={ templ.SafeURL(fmt.Sprintf("/passwords/%v/edit", password.Id)) }
             class="bg-blue-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">Edit</a>
          <a href="javascript:void(0)"
          	 id="button-delete-password"
          	 hx-delete={ fmt.Sprintf("/passwords/%v/delete", password.Id) }
          	 hx-confirm="Are you sure you want to delete this password?"
             class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Delete</a>
        </div>
      </div>
    </div>
	}
}

templ EditPassword(password models.EncryptedPassword) {
	@PasswordForm(password)
}

templ PasswordForm(password models.EncryptedPassword) {
	@layouts.Base() {
		<div class="space-y-4 p-6 bg-white shadow-md rounded-md">
			<div class="flex items-center space-x-4">
				<h1 class="text-2xl font-semibold">Edit Password</h1>
				<a if password.Id != 0 {
						href={ templ.SafeURL(fmt.Sprintf("/passwords/%v", password.Id)) }
						} else {
							href="/"
						}
						class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Back</a>
			</div>

			<form id="password-form"
						hx-boost="false"
						if password.Id != 0 {
							action={templ.SafeURL(fmt.Sprintf("/passwords/%v", password.Id))}
						} else {
							action="/passwords"
						}
						method="POST">
				<input type="hidden" id="passwordId" name="id" value={ fmt.Sprintf("%v", password.Id) } />
				<div class="flex items justify-between w-3/4 mb-2">
					<label for="name" class="mr-4">Name</label>
					<input type="text" name="name" id="name" value={ password.Name } class="w-1/2 p-2 rounded-md bg-slate-400" />
				</div>

				<div class="flex items justify-between w-3/4 mb-2">
					<label for="login" class="mr-4">Login</label>
					<input type="text" name="login" id="login" value={ password.Login } class="w-1/2 p-2 rounded-md bg-slate-400" />
				</div>

				<div class="flex items justify-between w-3/4 mb-2">
					<label for="resource" class="mr-4">Url</label>
					<input type="text" name="resource"
								 id="resource"
								 value={ password.Resource }
								 class="w-1/2 p-2 rounded-md bg-slate-400" />
				</div>

				<div class="flex items justify-between w-3/4 mb-2">
					<label for="password" class="mr-4">Password</label>
					<input type="text"
								 name="password"
								 id="password"
								 value={ password.Password }
								 class="w-1/2 p-2 rounded-md bg-slate-400" />
					<input type="hidden" name="password" id="passwordEnc" value={ password.Password } />
					<input type="hidden" name="salt" id="passwordSalt" value={ password.Salt } />
					<input type="hidden" name="iv" id="passwordIV" value={ password.Iv } />
				</div>

				<div class="flex items justify-between w-3/4">
					<button type="submit" class="bg-indigo-600 text-white p-2 rounded-md">Save</button>
				</div>
			</form>

			<script>
				(async function() {
					const formEl = document.getElementById('password-form');

					formEl.addEventListener('submit', async function(event) {
						event.preventDefault();

						const form = event.target;
						const passwordField = form.querySelector('#password');
						const saltField = form.querySelector('#passwordSalt');
						const ivField = form.querySelector('#passwordIV');

						const encryptedPassword = await encrypt(passwordField.value, getMasterPassword());

						passwordField.value = encryptedPassword.data;
						saltField.value = encryptedPassword.salt;
						ivField.value = encryptedPassword.iv;

						const formData = new FormData();
            formData.append('id', form.querySelector('#passwordId').value);
            formData.append('name', form.querySelector('#name').value);
            formData.append('login', form.querySelector('#login').value);
            formData.append('resource', form.querySelector('#resource').value);
            formData.append('password', passwordField.value);
            formData.append('salt', saltField.value);
            formData.append('iv', ivField.value);

						const response = await fetch(form.action, {
							method: 'POST',
							body: new URLSearchParams(formData),
							headers: {
								'Content-Type': 'application/x-www-form-urlencoded'
							}
						});

						if (response.ok) {
						  id = form.querySelector('#passwordId').value;
						  if (id == 0) {
						    window.location.href = '/';
						  } else {
						    window.location.href = `/passwords/${id}`;
						  }
						} else {
							console.error('Form submission error');
						}
					});
				})();
			</script>

			<script>
				htmx.onLoad(async function(content) {
						const form = document.getElementById('password-form')

						if (form) {
								const passwordEncField = document.getElementById('passwordEnc');
								const saltField = document.getElementById('passwordSalt');
								const ivField = document.getElementById('passwordIV');
								const passwordField = document.getElementById('password');

								if (passwordEncField && saltField && ivField && passwordField && !isEmptyForm()) {
										console.log("Elements found, proceeding with decryption");

										const salt = base64ToArrayBuffer(saltField.value);
										const iv = base64ToArrayBuffer(ivField.value);
										const encryptedPassword = base64ToArrayBuffer(passwordEncField.value);

										passwordField.value = await decrypt(encryptedPassword, getMasterPassword(), salt, iv);
								} else {
										console.log("Some elements are missing or new password form");
								}
						}
				});

				function isEmptyForm() {
					const form = document.getElementById('password-form');
					const name = form.querySelector('#name').value;
					const resource = form.querySelector('#resource').value;
					const password = form.querySelector('#password').value;

					return name === '' && resource === '' && password === '';
				}
			</script>
		</div>
	}
}