package components

import (
	"fmt"
	"ypeskov/go-password-manager/models"
	"ypeskov/go-password-manager/cmd/web/layouts"
)

templ PasswordDetails(password models.Password) {
	@layouts.Base() {
		<div class="space-y-4 p-6 bg-white shadow-md rounded-md">
			<div class="flex items-center space-x-4">
				<h1 class="text-2xl font-semibold">Password Details</h1>
				<a href="/" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Back</a>
			</div>

      <div class="flex justify-between p-3 rounded-md password-container">
        <div class="flex items-center justify-between w-3/4">
          <p class="mr-4">{ password.Name }</p>
          <p>{ password.Resource }</p>
          <button id="show-password-button"
          				onclick="showPassword()"
          				class="bg-blue-300 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Show Password</button>
          <p id="decrypted-password" class="hidden text-black font-bold py-2 px-4 rounded"></p>
          <span id="password" class="hidden">{ password.Password }</span>
          <span id="password-salt" class="hidden">{ password.Salt }</span>
          <span id="password-iv" class="hidden">{ password.Iv }</span>
        </div>
        <div class="flex items-center space-x-2">
          <a href={ templ.SafeURL(fmt.Sprintf("/passwords/%v/edit", password.Id)) }
             class="bg-blue-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">Edit</a>
          <a href="javascript:void(0)"
          	 id="button-delete-password"
          	 hx-delete={ fmt.Sprintf("/passwords/%v/delete", password.Id) }
          	 hx-confirm="Are you sure you want to delete this password?"
             class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Delete</a>
        </div>
      </div>
    </div>

      <script>
				async function showPassword() {
					const salt = base64ToArrayBuffer(document.getElementById('password-salt').textContent);
					const iv = base64ToArrayBuffer(document.getElementById('password-iv').textContent);
					const encryptedPassword = base64ToArrayBuffer(document.getElementById('password').textContent);

					const decryptedPassword = await decrypt(encryptedPassword, 'zalupa', salt, iv);
					document.getElementById('decrypted-password').textContent = decryptedPassword;
					document.getElementById('decrypted-password').classList.remove('hidden');
					document.getElementById('show-password-button').classList.add('hidden');
				}
			</script>
	}
}

templ EditPassword(password models.Password) {
	@PasswordForm(password)
}

templ PasswordForm(password models.Password) {
	@layouts.Base() {
		<div class="space-y-4 p-6 bg-white shadow-md rounded-md">
			<div class="flex items-center space-x-4">
				<h1 class="text-2xl font-semibold">Edit Password</h1>
				<a if password.Id != 0 {
						href={ templ.SafeURL(fmt.Sprintf("/passwords/%v", password.Id)) }
						} else {
							href="/"
						}
						class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Back</a>
			</div>

			<form id="password-form"
						hx-boost="false"
						if password.Id != 0 {
							action={templ.SafeURL(fmt.Sprintf("/passwords/%v", password.Id))}
						} else {
							action="/passwords"
						}
						method="POST">
				<input type="hidden" id="passwordId" name="id" value={ fmt.Sprintf("%v", password.Id) } />
				<div class="flex items justify-between w-3/4 mb-2">
					<label for="name" class="mr-4">Name</label>
					<input type="text" name="name" id="name" value={ password.Name } class="w-1/2 p-2 rounded-md bg-slate-400" />
				</div>

				<div class="flex items justify-between w-3/4 mb-2">
					<label for="resource" class="mr-4">Url</label>
					<input type="text" name="resource"
								 id="resource"
								 value={ password.Resource }
								 class="w-1/2 p-2 rounded-md bg-slate-400" />
				</div>

				<div class="flex items justify-between w-3/4 mb-2">
					<label for="password" class="mr-4">Password</label>
					<input type="text" name="password" id="password" value={ password.Password } class="w-1/2 p-2 rounded-md bg-slate-400" />

					<input type="hidden" name="salt" id="passwordSalt" />
					<input type="hidden" name="iv" id="passwordIV" />
				</div>

				<div class="flex items justify-between w-3/4">
					<button type="submit" class="bg-indigo-600 text-white p-2 rounded-md">Save</button>
				</div>
			</form>

			<script>
				(async function() {
					const formEl = document.getElementById('password-form');
					formEl.addEventListener('submit', async function(event) {
						event.preventDefault();

						const form = event.target;
						const passwordField = form.querySelector('#password');
						const saltField = form.querySelector('#passwordSalt');
						const ivField = form.querySelector('#passwordIV');

						const encryptedPassword = await encrypt(passwordField.value, 'zalupa');

						passwordField.value = encryptedPassword.data;
						saltField.value = encryptedPassword.salt;
						ivField.value = encryptedPassword.iv;

						const formData = new FormData(form);

						const response = await fetch(form.action, {
							method: 'POST',
							body: new URLSearchParams(formData),
							headers: {
								'Content-Type': 'application/x-www-form-urlencoded'
							}
						});

						if (response.ok) {
						  id = form.querySelector('#passwordId').value;
						  if (id == 0) {
						    window.location.href = '/';
						  } else {
						    window.location.href = `/passwords/${id}`;
						  }
						} else {
							console.error('Form submission error');
						}
					});
				})();
			</script>
		</div>
	}
}